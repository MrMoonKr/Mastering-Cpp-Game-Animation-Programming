#version 460 core
layout(local_size_x = 1, local_size_y = 32, local_size_z = 1) in;

struct PerInstanceAnimData {
  uint firstAnimClipNum;
  uint secondAnimClipNum;
  uint headLeftRightAnimClipNum;
  uint headUpDownAnimClipNum;
  float firstClipReplayTimestamp;
  float secondClipReplayTimestamp;
  float headLeftRightReplayTimestamp;
  float headUpDownReplayTimestamp;
  float blendFactor;
};

/* lookups */
layout (std430, binding = 0) readonly restrict buffer AnimLookup {
  vec4 lookupData[];
};

/* animation data per instance */
layout (std430, binding = 1) readonly restrict buffer InstanceAnimData {
  PerInstanceAnimData instAnimData[];
};

/* resulting TRS matrix per node and instance */
layout (std430, binding = 2) writeonly restrict buffer TRSMatrix {
  mat4 trsMat[];
};

mat4 createTranslationMatrix(vec4 t) {
  return mat4(
    1.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0,
    t.x, t.y, t.z, 1.0
  );
}

mat4 createScaleMatrix(vec4 s) {
  return mat4(
    s.x, 0.0, 0.0, 0.0,
    0.0, s.y, 0.0, 0.0,
    0.0, 0.0, s.z, 0.0,
    0.0, 0.0, 0.0, 1.0
 );
}

mat4 createRotationMatrix(vec4 q) {
  /* this is mat3_cast from GLM */
  float qxx = q.x * q.x;
  float qyy = q.y * q.y;
  float qzz = q.z * q.z;
  float qxz = q.x * q.z;
  float qxy = q.x * q.y;
  float qyz = q.y * q.z;
  float qwx = q.w * q.x;
  float qwy = q.w * q.y;
  float qwz = q.w * q.z;

  return mat4(
    1.0 - 2.0 * (qyy + qzz),       2.0 * (qxy + qwz),       2.0 * (qxz - qwy), 0.0,
          2.0 * (qxy - qwz), 1.0 - 2.0 * (qxx + qzz),       2.0 * (qyz + qwx), 0.0,
          2.0 * (qxz + qwy),       2.0 * (qyz - qwx), 1.0 - 2.0 * (qxx + qyy), 0.0,
          0.0,                     0.0,                     0.0,               1.0);
}

/* quaternions! */
vec4 slerp(vec4 a, vec4 b, float t) {
  float dotAB = dot(a, b);

  if (abs(dotAB) >= 1.0) {
    return a;
  }

  if (dotAB < 0.0) {
    b = -b;
    dotAB = -dotAB;
  }

  float theta = acos(dotAB);
  float sinTheta = sin(theta);

  if (abs(sinTheta) < 0.001) {
    return a * 0.5 + b * 0.5;
  }

  float af = sin((1.0 - t) * theta) / sinTheta;
  float bf = sin(t * theta) / sinTheta;

  return a * af + b * bf;
}

/* quaternion multiplication */
vec4 qMult(vec4 a, vec4 b) {
  return vec4(
    a.x * b.w + a.w * b.x + a.z * b.y - a.y * b.z,
    a.y * b.w + a.w * b.y + a.x * b.z - a.z * b.x,
    a.z * b.w + a.w * b.z + a.y * b.x - a.x * b.y,
    a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z
  );
}

/* calculate the inverse of a quaternion */
vec4 qInverse(vec4 a) {
  /* inverse(quat) = conjugate(quat) / abs(quat) -> abs = dot by itself */
  return vec4(-a.x, -a.y, -a.z, a.w) / dot(a, a);
}

void main() {
  /* we store the inverse time scaling factor in x component at index 0 */
  int lookupWidth = 1023 + 1;

  uint node = gl_GlobalInvocationID.x;
  uint instance = gl_GlobalInvocationID.y;

  /* X work group size is number of bones */
  uint numberOfBones = gl_NumWorkGroups.x;

  /* offset of a node in the lookup data  */
  uint boneOffset = lookupWidth * 3;

  /* offset between two clips */
  uint clipOffset = numberOfBones * boneOffset;

  uint firstClip = instAnimData[instance].firstAnimClipNum;
  uint secondClip = instAnimData[instance].secondAnimClipNum;
  uint headLeftRightClip = instAnimData[instance].headLeftRightAnimClipNum;
  uint headUpDownClip = instAnimData[instance].headUpDownAnimClipNum;
  float blendFactor = instAnimData[instance].blendFactor;

  /* first element of every lookup row contains in the .x component the inverse scale factor */
  float firstTransInvScaleFactor = lookupData[firstClip * clipOffset + node * boneOffset].x;
  float firstRotInvScaleFactor = lookupData[firstClip * clipOffset + node * boneOffset + lookupWidth].x;
  float firstScaleInvScaleFactor = lookupData[firstClip * clipOffset + node * boneOffset + lookupWidth * 2].x;

  float secondTransInvScaleFactor = lookupData[secondClip * clipOffset + node * boneOffset].x;
  float secondRotInvScaleFactor = lookupData[secondClip * clipOffset + node * boneOffset + lookupWidth].x;
  float secondScaleInvScaleFactor = lookupData[secondClip * clipOffset + node * boneOffset + lookupWidth * 2].x;

  float headLeftRightTransInvScaleFactor = lookupData[headLeftRightClip * clipOffset + node * boneOffset].x;
  float headLeftRightRotInvScaleFactor = lookupData[headLeftRightClip * clipOffset + node * boneOffset + lookupWidth].x;
  float headLeftRightScaleInvScaleFactor = lookupData[headLeftRightClip * clipOffset + node * boneOffset + lookupWidth * 2].x;

  float headUpDownTransInvScaleFactor = lookupData[headUpDownClip * clipOffset + node * boneOffset].x;
  float headUpDownRotInvScaleFactor = lookupData[headUpDownClip * clipOffset + node * boneOffset + lookupWidth].x;
  float headUpDownScaleInvScaleFactor = lookupData[headUpDownClip * clipOffset + node * boneOffset + lookupWidth * 2].x;

  /* get the right index */
  int firstTransLookupIndex = clamp(int(instAnimData[instance].firstClipReplayTimestamp * firstTransInvScaleFactor) + 1, 0, lookupWidth - 1);
  int firstRotLookupIndex = clamp(int(instAnimData[instance].firstClipReplayTimestamp * firstRotInvScaleFactor) + 1, 0, lookupWidth - 1);
  int firstScaleLookupIndex = clamp(int(instAnimData[instance].firstClipReplayTimestamp * firstScaleInvScaleFactor) + 1, 0, lookupWidth - 1);

  int secondTransLookupIndex = clamp(int(instAnimData[instance].secondClipReplayTimestamp * secondTransInvScaleFactor) + 1, 0, lookupWidth - 1);
  int secondRotLookupIndex = clamp(int(instAnimData[instance].secondClipReplayTimestamp * secondRotInvScaleFactor) + 1, 0, lookupWidth - 1);
  int secondScaleLookupIndex = clamp(int(instAnimData[instance].secondClipReplayTimestamp * secondScaleInvScaleFactor) + 1, 0, lookupWidth - 1);

  int headLeftRightTransLookupIndex = clamp(int(instAnimData[instance].headLeftRightReplayTimestamp * headLeftRightTransInvScaleFactor) + 1, 0, lookupWidth - 1);
  int headLeftRightRotLookupIndex = clamp(int(instAnimData[instance].headLeftRightReplayTimestamp * headLeftRightRotInvScaleFactor) + 1, 0, lookupWidth - 1);
  int headLeftRightScaleLookupIndex = clamp(int(instAnimData[instance].headLeftRightReplayTimestamp * headLeftRightScaleInvScaleFactor) + 1, 0, lookupWidth - 1);

  int headUpDownTransLookupIndex = clamp(int(instAnimData[instance].headUpDownReplayTimestamp * headUpDownTransInvScaleFactor) + 1, 0, lookupWidth - 1);
  int headUpDownRotLookupIndex = clamp(int(instAnimData[instance].headUpDownReplayTimestamp * headUpDownRotInvScaleFactor) + 1, 0, lookupWidth - 1);
  int headUpDownScaleLookupIndex = clamp(int(instAnimData[instance].headUpDownReplayTimestamp * headUpDownScaleInvScaleFactor) + 1, 0, lookupWidth - 1);

  /* data lookup */
  vec4 firstTranslation = lookupData[firstClip * clipOffset + node * boneOffset + firstTransLookupIndex];
  vec4 firstRotation = lookupData[firstClip * clipOffset + node * boneOffset + lookupWidth + firstRotLookupIndex]; // this is a quaternion
  vec4 firstScale = lookupData[firstClip * clipOffset + node * boneOffset + lookupWidth * 2 + firstScaleLookupIndex];

  vec4 secondTranslation = lookupData[secondClip * clipOffset + node * boneOffset + secondTransLookupIndex];
  vec4 secondRotation = lookupData[secondClip * clipOffset + node * boneOffset + lookupWidth + secondRotLookupIndex]; // this is also a quaternion
  vec4 secondScale = lookupData[secondClip * clipOffset + node * boneOffset + lookupWidth * 2 + secondScaleLookupIndex];

  /* get first animation frame as base */
  vec4 headLeftRightBaseTranslation = lookupData[headLeftRightClip * clipOffset + node * boneOffset + 1];
  vec4 headLeftRightBaseRotation = lookupData[headLeftRightClip * clipOffset + node * boneOffset + lookupWidth + 1]; // this is also a quaternion
  vec4 headLeftRightBaseScale = lookupData[headLeftRightClip * clipOffset + node * boneOffset + lookupWidth * 2 + 1];

  vec4 headUpDownBaseTranslation = lookupData[headUpDownClip * clipOffset + node * boneOffset + 1];
  vec4 headUpDownBaseRotation = lookupData[headUpDownClip * clipOffset + node * boneOffset + lookupWidth + 1]; // this is also a quaternion
  vec4 headUpDownBaseScale = lookupData[headUpDownClip * clipOffset + node * boneOffset + lookupWidth * 2 + 1];

  /* and extract the difference to the first frame */
  vec4 headLeftRightTranslation = lookupData[headLeftRightClip * clipOffset + node * boneOffset + headLeftRightTransLookupIndex];
  vec4 headLeftRightRotation = lookupData[headLeftRightClip * clipOffset + node * boneOffset + lookupWidth + headLeftRightRotLookupIndex]; // this is also a quaternion
  vec4 headLeftRightScale = lookupData[headLeftRightClip * clipOffset + node * boneOffset + lookupWidth * 2 + headLeftRightScaleLookupIndex];

  vec4 headUpDownTranslation = lookupData[headUpDownClip * clipOffset + node * boneOffset + headUpDownTransLookupIndex];
  vec4 headUpDownRotation = lookupData[headUpDownClip * clipOffset + node * boneOffset + lookupWidth + headUpDownRotLookupIndex]; // this is also a quaternion
  vec4 headUpDownScale = lookupData[headUpDownClip * clipOffset + node * boneOffset + lookupWidth * 2 + headUpDownScaleLookupIndex];

  vec4 headLeftRightTranslationDiff = headLeftRightTranslation - headLeftRightBaseTranslation;
  vec4 headLeftRightRotationDiff = qMult(qInverse(headLeftRightBaseRotation), headLeftRightRotation);
  vec4 headLeftRightScaleDiff = headLeftRightScale - headLeftRightBaseScale;

  vec4 headUpDownTranslationDiff = headUpDownTranslation - headUpDownBaseTranslation;
  vec4 headUpDownRotationDiff = qMult(qInverse(headUpDownBaseRotation), headUpDownRotation);
  vec4 headUpDownScaleDiff = headUpDownScale - headUpDownBaseScale;

  /* combine both diffs into one */
  vec4 headTranslationDiff = headLeftRightTranslationDiff + headUpDownTranslationDiff;
  vec4 headScaleDiff = headLeftRightScaleDiff + headUpDownScaleDiff;
  vec4 headRotationDiff = qMult(headUpDownRotationDiff, headLeftRightRotationDiff);

  /* blend between animations */
  vec4 finalTranslation = mix(firstTranslation + headTranslationDiff, secondTranslation + headTranslationDiff, blendFactor);
  vec4 finalScale = mix(firstScale + headScaleDiff, secondScale + headScaleDiff, blendFactor);
  vec4 finalRotation = slerp(qMult(headRotationDiff, firstRotation), qMult(headRotationDiff, secondRotation), blendFactor);

  /* create the TRS matrix from interpolated values */
  uint index = node + numberOfBones * instance;
  trsMat[index] = createTranslationMatrix(finalTranslation) * createRotationMatrix(finalRotation) * createScaleMatrix(finalScale);
}
